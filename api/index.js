Index.PACKAGES = {"zio" : [], "zio.mock" : [{"name" : "zio.mock.BuildInfo", "case object" : "zio\/mock\/BuildInfo$.html", "shortDescription" : "This object was generated by sbt-buildinfo.", "members_case object" : [{"label" : "toString", "tail" : ": String", "member" : "zio.mock.BuildInfo.toString", "link" : "zio\/mock\/BuildInfo$.html#toString:String", "kind" : "val"}, {"label" : "isSnapshot", "tail" : ": Boolean", "member" : "zio.mock.BuildInfo.isSnapshot", "link" : "zio\/mock\/BuildInfo$.html#isSnapshot:Boolean", "kind" : "val"}, {"label" : "sbtVersion", "tail" : ": String", "member" : "zio.mock.BuildInfo.sbtVersion", "link" : "zio\/mock\/BuildInfo$.html#sbtVersion:String", "kind" : "val"}, {"label" : "scalaVersion", "tail" : ": String", "member" : "zio.mock.BuildInfo.scalaVersion", "link" : "zio\/mock\/BuildInfo$.html#scalaVersion:String", "kind" : "val"}, {"label" : "version", "tail" : ": String", "member" : "zio.mock.BuildInfo.version", "link" : "zio\/mock\/BuildInfo$.html#version:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "zio.mock.BuildInfo.name", "link" : "zio\/mock\/BuildInfo$.html#name:String", "kind" : "val"}, {"label" : "moduleName", "tail" : ": String", "member" : "zio.mock.BuildInfo.moduleName", "link" : "zio\/mock\/BuildInfo$.html#moduleName:String", "kind" : "val"}, {"label" : "organization", "tail" : ": String", "member" : "zio.mock.BuildInfo.organization", "link" : "zio\/mock\/BuildInfo$.html#organization:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/mock\/BuildInfo$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/mock\/BuildInfo$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/BuildInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/BuildInfo$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/BuildInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/BuildInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/BuildInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/BuildInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/BuildInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/BuildInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/BuildInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/BuildInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/BuildInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/BuildInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/BuildInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/BuildInfo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/BuildInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/BuildInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/BuildInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "zio.mock.Capability", "shortDescription" : "A Capability[R, I, E, A] represents a capability of environment R that takes an input I and returns an effectthat may fail with an error E or produce a single A.", "object" : "zio\/mock\/Capability$.html", "members_class" : [{"label" : "isEqual", "tail" : "(that: Capability[R0, I0, E0, A0]): Boolean", "member" : "zio.mock.Capability.isEqual", "link" : "zio\/mock\/Capability.html#isEqual[R0,I0,E0,A0](that:zio.mock.Capability[R0,I0,E0,A0]):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(returns: Result[I, E, A])(ev: <:<[I, Unit]): Expectation[R]", "member" : "zio.mock.Capability.apply", "link" : "zio\/mock\/Capability.html#apply(returns:zio.mock.Result[I,E,A])(implicitev:I<:<Unit):zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "apply", "tail" : "(assertion: Assertion[I], result: Result[I, E, A])(ev: =!=[I, Unit]): Expectation[R]", "member" : "zio.mock.Capability.apply", "link" : "zio\/mock\/Capability.html#apply(assertion:zio.test.Assertion[I],result:zio.mock.Result[I,E,A])(implicitev:I=!=Unit):zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "apply", "tail" : "(assertion: Assertion[I])(ev1: =!=[I, Unit], ev2: <:<[A, Unit]): Expectation[R]", "member" : "zio.mock.Capability.apply", "link" : "zio\/mock\/Capability.html#apply(assertion:zio.test.Assertion[I])(implicitev1:I=!=Unit,implicitev2:A<:<Unit):zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "apply", "tail" : "()(ev1: =:=[I, Unit], ev2: <:<[A, Unit]): Expectation[R]", "member" : "zio.mock.Capability.apply", "link" : "zio\/mock\/Capability.html#apply()(implicitev1:I=:=Unit,implicitev2:A<:<Unit):zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "outputTag", "tail" : ": zio.LightTypeTag", "member" : "zio.mock.Capability.outputTag", "link" : "zio\/mock\/Capability.html#outputTag:zio.LightTypeTag", "kind" : "val"}, {"label" : "errorTag", "tail" : ": zio.LightTypeTag", "member" : "zio.mock.Capability.errorTag", "link" : "zio\/mock\/Capability.html#errorTag:zio.LightTypeTag", "kind" : "val"}, {"label" : "inputTag", "tail" : ": zio.LightTypeTag", "member" : "zio.mock.Capability.inputTag", "link" : "zio\/mock\/Capability.html#inputTag:zio.LightTypeTag", "kind" : "val"}, {"member" : "zio.mock.Capability#<init>", "error" : "unsupported entity"}, {"label" : "mock", "tail" : ": Mock[R]", "member" : "zio.mock.Capability.mock", "link" : "zio\/mock\/Capability.html#mock:zio.mock.Mock[R]", "kind" : "val"}, {"label" : "toString", "tail" : ": String", "member" : "zio.mock.Capability.Base.toString", "link" : "zio\/mock\/Capability.html#toString:String", "kind" : "val"}, {"label" : "id", "tail" : ": UUID", "member" : "zio.mock.Capability.Base.id", "link" : "zio\/mock\/Capability.html#id:java.util.UUID", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/Capability.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/Capability.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/Capability.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/Capability.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/Capability.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/Capability.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/Capability.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Capability.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Capability.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Capability.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/Capability.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/Capability.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/Capability.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/Capability.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/Capability.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/Capability.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/Capability.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/Capability.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Poly", "tail" : "", "member" : "zio.mock.Capability.Poly", "link" : "zio\/mock\/Capability$.html#Poly", "kind" : "object"}, {"label" : "Poly", "tail" : "", "member" : "zio.mock.Capability.Poly", "link" : "zio\/mock\/Capability$.html#Poly[R,I,E,A]extendsCapability.Base[R]", "kind" : "abstract class"}, {"label" : "Unknown", "tail" : "", "member" : "zio.mock.Capability.Unknown", "link" : "zio\/mock\/Capability$.html#UnknownextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Base", "tail" : "", "member" : "zio.mock.Capability.Base", "link" : "zio\/mock\/Capability$.html#Base[R]extendsAnyRef", "kind" : "abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/Capability$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/Capability$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/Capability$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/Capability$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/Capability$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/Capability$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/Capability$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Capability$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Capability$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Capability$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/Capability$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/Capability$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/Capability$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/Capability$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/Capability$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/Capability$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/Capability$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/Capability$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/Capability$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/mock\/Capability.html", "kind" : "class"}, {"name" : "zio.mock.Expectation", "shortDescription" : "An Expectation[R] is an immutable tree structure that represents expectations on environment R.", "object" : "zio\/mock\/Expectation$.html", "members_class" : [{"label" : "toLayer", "tail" : "(trace: Trace): ULayer[R]", "member" : "zio.mock.Expectation.toLayer", "link" : "zio\/mock\/Expectation.html#toLayer(implicittrace:zio.Trace):zio.ULayer[R]", "kind" : "def"}, {"label" : "repeats", "tail" : "(range: Range): Expectation[R]", "member" : "zio.mock.Expectation.repeats", "link" : "zio\/mock\/Expectation.html#repeats(range:Range):zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "or", "tail" : "(that: Expectation[R0])(arg0: zio.EnvironmentTag[R0]): Expectation[R with R0]", "member" : "zio.mock.Expectation.or", "link" : "zio\/mock\/Expectation.html#or[R0](that:zio.mock.Expectation[R0])(implicitevidence$7:zio.EnvironmentTag[R0]):zio.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "thrice", "tail" : "(): Expectation[R]", "member" : "zio.mock.Expectation.thrice", "link" : "zio\/mock\/Expectation.html#thrice:zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "twice", "tail" : "(): Expectation[R]", "member" : "zio.mock.Expectation.twice", "link" : "zio\/mock\/Expectation.html#twice:zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "exactly", "tail" : "(times: Int): Expectation[R]", "member" : "zio.mock.Expectation.exactly", "link" : "zio\/mock\/Expectation.html#exactly(times:Int):zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "optional", "tail" : "(): Expectation[R]", "member" : "zio.mock.Expectation.optional", "link" : "zio\/mock\/Expectation.html#optional:zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "atMost", "tail" : "(max: Int): Expectation[R]", "member" : "zio.mock.Expectation.atMost", "link" : "zio\/mock\/Expectation.html#atMost(max:Int):zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(min: Int): Expectation[R]", "member" : "zio.mock.Expectation.atLeast", "link" : "zio\/mock\/Expectation.html#atLeast(min:Int):zio.mock.Expectation[R]", "kind" : "def"}, {"label" : "andThen", "tail" : "(that: Expectation[R0])(arg0: zio.EnvironmentTag[R0]): Expectation[R with R0]", "member" : "zio.mock.Expectation.andThen", "link" : "zio\/mock\/Expectation.html#andThen[R0](that:zio.mock.Expectation[R0])(implicitevidence$6:zio.EnvironmentTag[R0]):zio.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "and", "tail" : "(that: Expectation[R0])(arg0: zio.EnvironmentTag[R0]): Expectation[R with R0]", "member" : "zio.mock.Expectation.and", "link" : "zio\/mock\/Expectation.html#and[R0](that:zio.mock.Expectation[R0])(implicitevidence$5:zio.EnvironmentTag[R0]):zio.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "++", "tail" : "(that: Expectation[R0])(arg0: zio.EnvironmentTag[R0]): Expectation[R with R0]", "member" : "zio.mock.Expectation.++", "link" : "zio\/mock\/Expectation.html#++[R0](that:zio.mock.Expectation[R0])(implicitevidence$4:zio.EnvironmentTag[R0]):zio.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Expectation[R0])(arg0: zio.EnvironmentTag[R0]): Expectation[R with R0]", "member" : "zio.mock.Expectation.||", "link" : "zio\/mock\/Expectation.html#||[R0](that:zio.mock.Expectation[R0])(implicitevidence$3:zio.EnvironmentTag[R0]):zio.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Expectation[R0])(arg0: zio.EnvironmentTag[R0]): Expectation[R with R0]", "member" : "zio.mock.Expectation.&&", "link" : "zio\/mock\/Expectation.html#&&[R0](that:zio.mock.Expectation[R0])(implicitevidence$2:zio.EnvironmentTag[R0]):zio.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/Expectation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/Expectation.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/Expectation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/Expectation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/Expectation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/Expectation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/Expectation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Expectation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Expectation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Expectation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/Expectation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/Expectation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/Expectation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/Expectation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/Expectation.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/Expectation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/Expectation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/Expectation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/Expectation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "toLayer", "tail" : "(trunk: Expectation[R])(arg0: zio.EnvironmentTag[R], trace: Trace): ULayer[R]", "member" : "zio.mock.Expectation.toLayer", "link" : "zio\/mock\/Expectation$.html#toLayer[R](trunk:zio.mock.Expectation[R])(implicitevidence$21:zio.EnvironmentTag[R],implicittrace:zio.Trace):zio.ULayer[R]", "kind" : "implicit def"}, {"label" : "valueZIO", "tail" : "(f: (I) => IO[Nothing, A]): Succeed[I, A]", "member" : "zio.mock.Expectation.valueZIO", "link" : "zio\/mock\/Expectation$.html#valueZIO[I,A](f:I=>zio.IO[Nothing,A]):zio.mock.Result.Succeed[I,A]", "kind" : "def"}, {"label" : "valueF", "tail" : "(f: (I) => A)(trace: Trace): Succeed[I, A]", "member" : "zio.mock.Expectation.valueF", "link" : "zio\/mock\/Expectation$.html#valueF[I,A](f:I=>A)(implicittrace:zio.Trace):zio.mock.Result.Succeed[I,A]", "kind" : "def"}, {"label" : "value", "tail" : "(value: A)(trace: Trace): Succeed[Any, A]", "member" : "zio.mock.Expectation.value", "link" : "zio\/mock\/Expectation$.html#value[A](value:A)(implicittrace:zio.Trace):zio.mock.Result.Succeed[Any,A]", "kind" : "def"}, {"label" : "unit", "tail" : "(trace: Trace): Succeed[Any, Unit]", "member" : "zio.mock.Expectation.unit", "link" : "zio\/mock\/Expectation$.html#unit(implicittrace:zio.Trace):zio.mock.Result.Succeed[Any,Unit]", "kind" : "def"}, {"label" : "never", "tail" : "(trace: Trace): Succeed[Any, Nothing]", "member" : "zio.mock.Expectation.never", "link" : "zio\/mock\/Expectation$.html#never(implicittrace:zio.Trace):zio.mock.Result.Succeed[Any,Nothing]", "kind" : "def"}, {"label" : "failureZIO", "tail" : "(f: (I) => IO[E, Nothing])(trace: Trace): Fail[I, E]", "member" : "zio.mock.Expectation.failureZIO", "link" : "zio\/mock\/Expectation$.html#failureZIO[I,E](f:I=>zio.IO[E,Nothing])(implicittrace:zio.Trace):zio.mock.Result.Fail[I,E]", "kind" : "def"}, {"label" : "failureF", "tail" : "(f: (I) => E)(trace: Trace): Fail[I, E]", "member" : "zio.mock.Expectation.failureF", "link" : "zio\/mock\/Expectation$.html#failureF[I,E](f:I=>E)(implicittrace:zio.Trace):zio.mock.Result.Fail[I,E]", "kind" : "def"}, {"label" : "failure", "tail" : "(failure: E)(trace: Trace): Fail[Any, E]", "member" : "zio.mock.Expectation.failure", "link" : "zio\/mock\/Expectation$.html#failure[E](failure:E)(implicittrace:zio.Trace):zio.mock.Result.Fail[Any,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/Expectation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/Expectation$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/Expectation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/Expectation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/Expectation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/Expectation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/Expectation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Expectation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Expectation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Expectation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/Expectation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/Expectation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/Expectation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/Expectation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/Expectation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/Expectation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/Expectation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/Expectation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/Expectation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/mock\/Expectation.html", "kind" : "class"}, {"name" : "zio.mock.Mock", "shortDescription" : "A Mock[R] represents a mockable environment R.", "object" : "zio\/mock\/Mock$.html", "members_class" : [{"label" : "Poly", "tail" : "", "member" : "zio.mock.Mock.Poly", "link" : "zio\/mock\/Mock.html#Poly", "kind" : "object"}, {"label" : "Stream", "tail" : "", "member" : "zio.mock.Mock.Stream", "link" : "zio\/mock\/Mock.html#Stream[I,E,A]extendsCapability[R,I,Nothing,zio.stream.ZStream[Any,E,A]]", "kind" : "abstract class"}, {"label" : "Sink", "tail" : "", "member" : "zio.mock.Mock.Sink", "link" : "zio\/mock\/Mock.html#Sink[I,E,A,L,B]extendsCapability[R,I,E,zio.stream.ZSink[Any,E,A,L,B]]", "kind" : "abstract class"}, {"label" : "Method", "tail" : "", "member" : "zio.mock.Mock.Method", "link" : "zio\/mock\/Mock.html#Method[I,E<:Throwable,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "Effect", "tail" : "", "member" : "zio.mock.Mock.Effect", "link" : "zio\/mock\/Mock.html#Effect[I,E,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "withRuntime", "tail" : "(f: (Runtime[R]) => UIO[A])(trace: Trace): ZIO[R, Nothing, A]", "member" : "zio.mock.Mock.withRuntime", "link" : "zio\/mock\/Mock.html#withRuntime[R,A](f:zio.Runtime[R]=>zio.UIO[A])(implicittrace:zio.Trace):zio.ZIO[R,Nothing,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(trace: Trace): ULayer[R]", "member" : "zio.mock.Mock.empty", "link" : "zio\/mock\/Mock.html#empty(implicittrace:zio.Trace):zio.ULayer[R]", "kind" : "def"}, {"member" : "zio.mock.Mock#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/Mock.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/Mock.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/Mock.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/Mock.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/Mock.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/Mock.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/Mock.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Mock.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Mock.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Mock.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/Mock.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/Mock.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/Mock.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/Mock.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/Mock.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/Mock.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/Mock.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/Mock.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/Mock.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compose", "tail" : ": URLayer[Proxy, R]", "member" : "zio.mock.Mock.compose", "link" : "zio\/mock\/Mock.html#compose:zio.URLayer[zio.mock.Proxy,R]", "kind" : "abstract val"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/Mock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/Mock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/Mock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/Mock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/Mock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/Mock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/Mock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Mock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Mock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Mock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/Mock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/Mock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/Mock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/Mock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/Mock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/Mock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/Mock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/Mock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/Mock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/mock\/Mock.html", "kind" : "class"}, {"name" : "zio.mock.mockable", "shortDescription" : "", "members_class" : [{"label" : "macroTransform", "tail" : "(annottees: Any*): Any", "member" : "zio.mock.mockable.macroTransform", "link" : "zio\/mock\/mockable.html#macroTransform(annottees:Any*):Any", "kind" : "macro def"}, {"member" : "zio.mock.mockable#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/mockable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/mockable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/mockable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/mockable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/mockable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/mockable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/mockable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/mockable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/mockable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/mockable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/mockable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/mockable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/mockable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/mockable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/mockable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/mockable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/mockable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/mockable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/mockable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/mock\/mockable.html", "kind" : "class"}, {"name" : "zio.mock.MockClock", "shortDescription" : "", "object" : "zio\/mock\/MockClock$.html", "members_object" : [{"label" : "Poly", "tail" : "", "member" : "zio.mock.Mock.Poly", "link" : "zio\/mock\/Mock.html#Poly", "kind" : "object"}, {"label" : "Stream", "tail" : "", "member" : "zio.mock.Mock.Stream", "link" : "zio\/mock\/Mock.html#Stream[I,E,A]extendsCapability[R,I,Nothing,zio.stream.ZStream[Any,E,A]]", "kind" : "abstract class"}, {"label" : "Sink", "tail" : "", "member" : "zio.mock.Mock.Sink", "link" : "zio\/mock\/Mock.html#Sink[I,E,A,L,B]extendsCapability[R,I,E,zio.stream.ZSink[Any,E,A,L,B]]", "kind" : "abstract class"}, {"label" : "Method", "tail" : "", "member" : "zio.mock.Mock.Method", "link" : "zio\/mock\/Mock.html#Method[I,E<:Throwable,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "Effect", "tail" : "", "member" : "zio.mock.Mock.Effect", "link" : "zio\/mock\/Mock.html#Effect[I,E,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "compose", "tail" : ": URLayer[Proxy, Clock]", "member" : "zio.mock.MockClock.compose", "link" : "zio\/mock\/MockClock$.html#compose:zio.URLayer[zio.mock.Proxy,zio.Clock]", "kind" : "val"}, {"label" : "JavaClock", "tail" : "", "member" : "zio.mock.MockClock.JavaClock", "link" : "zio\/mock\/MockClock$.html#JavaClock", "kind" : "object"}, {"label" : "Sleep", "tail" : "", "member" : "zio.mock.MockClock.Sleep", "link" : "zio\/mock\/MockClock$.html#Sleep", "kind" : "object"}, {"label" : "Scheduler", "tail" : "", "member" : "zio.mock.MockClock.Scheduler", "link" : "zio\/mock\/MockClock$.html#Scheduler", "kind" : "object"}, {"label" : "NanoTime", "tail" : "", "member" : "zio.mock.MockClock.NanoTime", "link" : "zio\/mock\/MockClock$.html#NanoTime", "kind" : "object"}, {"label" : "LocalDateTime", "tail" : "", "member" : "zio.mock.MockClock.LocalDateTime", "link" : "zio\/mock\/MockClock$.html#LocalDateTime", "kind" : "object"}, {"label" : "Instant", "tail" : "", "member" : "zio.mock.MockClock.Instant", "link" : "zio\/mock\/MockClock$.html#Instant", "kind" : "object"}, {"label" : "CurrentDateTime", "tail" : "", "member" : "zio.mock.MockClock.CurrentDateTime", "link" : "zio\/mock\/MockClock$.html#CurrentDateTime", "kind" : "object"}, {"label" : "CurrentTime", "tail" : "", "member" : "zio.mock.MockClock.CurrentTime", "link" : "zio\/mock\/MockClock$.html#CurrentTime", "kind" : "object"}, {"label" : "withRuntime", "tail" : "(f: (Runtime[R]) => UIO[A])(trace: Trace): ZIO[R, Nothing, A]", "member" : "zio.mock.Mock.withRuntime", "link" : "zio\/mock\/MockClock$.html#withRuntime[R,A](f:zio.Runtime[R]=>zio.UIO[A])(implicittrace:zio.Trace):zio.ZIO[R,Nothing,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(trace: Trace): ULayer[Clock]", "member" : "zio.mock.Mock.empty", "link" : "zio\/mock\/MockClock$.html#empty(implicittrace:zio.Trace):zio.ULayer[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/MockClock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/MockClock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/MockClock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/MockClock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/MockClock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/MockClock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/MockClock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockClock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockClock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockClock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/MockClock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/MockClock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/MockClock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/MockClock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/MockClock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/MockClock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/MockClock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/MockClock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/MockClock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.mock.MockConsole", "shortDescription" : "", "object" : "zio\/mock\/MockConsole$.html", "members_object" : [{"label" : "Poly", "tail" : "", "member" : "zio.mock.Mock.Poly", "link" : "zio\/mock\/Mock.html#Poly", "kind" : "object"}, {"label" : "Stream", "tail" : "", "member" : "zio.mock.Mock.Stream", "link" : "zio\/mock\/Mock.html#Stream[I,E,A]extendsCapability[R,I,Nothing,zio.stream.ZStream[Any,E,A]]", "kind" : "abstract class"}, {"label" : "Sink", "tail" : "", "member" : "zio.mock.Mock.Sink", "link" : "zio\/mock\/Mock.html#Sink[I,E,A,L,B]extendsCapability[R,I,E,zio.stream.ZSink[Any,E,A,L,B]]", "kind" : "abstract class"}, {"label" : "Method", "tail" : "", "member" : "zio.mock.Mock.Method", "link" : "zio\/mock\/Mock.html#Method[I,E<:Throwable,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "Effect", "tail" : "", "member" : "zio.mock.Mock.Effect", "link" : "zio\/mock\/Mock.html#Effect[I,E,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "compose", "tail" : ": URLayer[Proxy, Console]", "member" : "zio.mock.MockConsole.compose", "link" : "zio\/mock\/MockConsole$.html#compose:zio.URLayer[zio.mock.Proxy,zio.Console]", "kind" : "val"}, {"label" : "ReadLine", "tail" : "", "member" : "zio.mock.MockConsole.ReadLine", "link" : "zio\/mock\/MockConsole$.html#ReadLine", "kind" : "object"}, {"label" : "PrintLineError", "tail" : "", "member" : "zio.mock.MockConsole.PrintLineError", "link" : "zio\/mock\/MockConsole$.html#PrintLineError", "kind" : "object"}, {"label" : "PrintLine", "tail" : "", "member" : "zio.mock.MockConsole.PrintLine", "link" : "zio\/mock\/MockConsole$.html#PrintLine", "kind" : "object"}, {"label" : "PrintError", "tail" : "", "member" : "zio.mock.MockConsole.PrintError", "link" : "zio\/mock\/MockConsole$.html#PrintError", "kind" : "object"}, {"label" : "Print", "tail" : "", "member" : "zio.mock.MockConsole.Print", "link" : "zio\/mock\/MockConsole$.html#Print", "kind" : "object"}, {"label" : "withRuntime", "tail" : "(f: (Runtime[R]) => UIO[A])(trace: Trace): ZIO[R, Nothing, A]", "member" : "zio.mock.Mock.withRuntime", "link" : "zio\/mock\/MockConsole$.html#withRuntime[R,A](f:zio.Runtime[R]=>zio.UIO[A])(implicittrace:zio.Trace):zio.ZIO[R,Nothing,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(trace: Trace): ULayer[Console]", "member" : "zio.mock.Mock.empty", "link" : "zio\/mock\/MockConsole$.html#empty(implicittrace:zio.Trace):zio.ULayer[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/MockConsole$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/MockConsole$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/MockConsole$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/MockConsole$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/MockConsole$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/MockConsole$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/MockConsole$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockConsole$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockConsole$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockConsole$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/MockConsole$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/MockConsole$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/MockConsole$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/MockConsole$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/MockConsole$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/MockConsole$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/MockConsole$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/MockConsole$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/MockConsole$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.mock.MockRandom", "shortDescription" : "", "object" : "zio\/mock\/MockRandom$.html", "members_object" : [{"label" : "Poly", "tail" : "", "member" : "zio.mock.Mock.Poly", "link" : "zio\/mock\/Mock.html#Poly", "kind" : "object"}, {"label" : "Stream", "tail" : "", "member" : "zio.mock.Mock.Stream", "link" : "zio\/mock\/Mock.html#Stream[I,E,A]extendsCapability[R,I,Nothing,zio.stream.ZStream[Any,E,A]]", "kind" : "abstract class"}, {"label" : "Sink", "tail" : "", "member" : "zio.mock.Mock.Sink", "link" : "zio\/mock\/Mock.html#Sink[I,E,A,L,B]extendsCapability[R,I,E,zio.stream.ZSink[Any,E,A,L,B]]", "kind" : "abstract class"}, {"label" : "Method", "tail" : "", "member" : "zio.mock.Mock.Method", "link" : "zio\/mock\/Mock.html#Method[I,E<:Throwable,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "Effect", "tail" : "", "member" : "zio.mock.Mock.Effect", "link" : "zio\/mock\/Mock.html#Effect[I,E,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "compose", "tail" : ": URLayer[Proxy, Random]", "member" : "zio.mock.MockRandom.compose", "link" : "zio\/mock\/MockRandom$.html#compose:zio.URLayer[zio.mock.Proxy,zio.Random]", "kind" : "val"}, {"label" : "Shuffle", "tail" : "", "member" : "zio.mock.MockRandom.Shuffle", "link" : "zio\/mock\/MockRandom$.html#Shuffle", "kind" : "object"}, {"label" : "SetSeed", "tail" : "", "member" : "zio.mock.MockRandom.SetSeed", "link" : "zio\/mock\/MockRandom$.html#SetSeed", "kind" : "object"}, {"label" : "NextUUID", "tail" : "", "member" : "zio.mock.MockRandom.NextUUID", "link" : "zio\/mock\/MockRandom$.html#NextUUID", "kind" : "object"}, {"label" : "NextString", "tail" : "", "member" : "zio.mock.MockRandom.NextString", "link" : "zio\/mock\/MockRandom$.html#NextString", "kind" : "object"}, {"label" : "NextPrintableChar", "tail" : "", "member" : "zio.mock.MockRandom.NextPrintableChar", "link" : "zio\/mock\/MockRandom$.html#NextPrintableChar", "kind" : "object"}, {"label" : "NextLongBounded", "tail" : "", "member" : "zio.mock.MockRandom.NextLongBounded", "link" : "zio\/mock\/MockRandom$.html#NextLongBounded", "kind" : "object"}, {"label" : "NextLongBetween", "tail" : "", "member" : "zio.mock.MockRandom.NextLongBetween", "link" : "zio\/mock\/MockRandom$.html#NextLongBetween", "kind" : "object"}, {"label" : "NextLong", "tail" : "", "member" : "zio.mock.MockRandom.NextLong", "link" : "zio\/mock\/MockRandom$.html#NextLong", "kind" : "object"}, {"label" : "NextIntBounded", "tail" : "", "member" : "zio.mock.MockRandom.NextIntBounded", "link" : "zio\/mock\/MockRandom$.html#NextIntBounded", "kind" : "object"}, {"label" : "NextIntBetween", "tail" : "", "member" : "zio.mock.MockRandom.NextIntBetween", "link" : "zio\/mock\/MockRandom$.html#NextIntBetween", "kind" : "object"}, {"label" : "NextInt", "tail" : "", "member" : "zio.mock.MockRandom.NextInt", "link" : "zio\/mock\/MockRandom$.html#NextInt", "kind" : "object"}, {"label" : "NextGaussian", "tail" : "", "member" : "zio.mock.MockRandom.NextGaussian", "link" : "zio\/mock\/MockRandom$.html#NextGaussian", "kind" : "object"}, {"label" : "NextFloatBetween", "tail" : "", "member" : "zio.mock.MockRandom.NextFloatBetween", "link" : "zio\/mock\/MockRandom$.html#NextFloatBetween", "kind" : "object"}, {"label" : "NextFloat", "tail" : "", "member" : "zio.mock.MockRandom.NextFloat", "link" : "zio\/mock\/MockRandom$.html#NextFloat", "kind" : "object"}, {"label" : "NextDoubleBetween", "tail" : "", "member" : "zio.mock.MockRandom.NextDoubleBetween", "link" : "zio\/mock\/MockRandom$.html#NextDoubleBetween", "kind" : "object"}, {"label" : "NextDouble", "tail" : "", "member" : "zio.mock.MockRandom.NextDouble", "link" : "zio\/mock\/MockRandom$.html#NextDouble", "kind" : "object"}, {"label" : "NextBytes", "tail" : "", "member" : "zio.mock.MockRandom.NextBytes", "link" : "zio\/mock\/MockRandom$.html#NextBytes", "kind" : "object"}, {"label" : "NextBoolean", "tail" : "", "member" : "zio.mock.MockRandom.NextBoolean", "link" : "zio\/mock\/MockRandom$.html#NextBoolean", "kind" : "object"}, {"label" : "withRuntime", "tail" : "(f: (Runtime[R]) => UIO[A])(trace: Trace): ZIO[R, Nothing, A]", "member" : "zio.mock.Mock.withRuntime", "link" : "zio\/mock\/MockRandom$.html#withRuntime[R,A](f:zio.Runtime[R]=>zio.UIO[A])(implicittrace:zio.Trace):zio.ZIO[R,Nothing,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(trace: Trace): ULayer[Random]", "member" : "zio.mock.Mock.empty", "link" : "zio\/mock\/MockRandom$.html#empty(implicittrace:zio.Trace):zio.ULayer[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/MockRandom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/MockRandom$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/MockRandom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/MockRandom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/MockRandom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/MockRandom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/MockRandom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockRandom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockRandom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockRandom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/MockRandom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/MockRandom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/MockRandom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/MockRandom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/MockRandom$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/MockRandom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/MockRandom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/MockRandom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/MockRandom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.mock.MockReporter", "shortDescription" : "", "object" : "zio\/mock\/MockReporter$.html", "members_object" : [{"label" : "apply", "tail" : "(formatter: ConsoleFormatter): PerTest[Nothing, R0, E0, Any]", "member" : "zio.mock.MockReporter.apply", "link" : "zio\/mock\/MockReporter$.html#apply[R0,E0,A](formatter:zio.mock.ConsoleFormatter):zio.test.TestAspect.PerTest[Nothing,R0,E0,Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/MockReporter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/MockReporter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/MockReporter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/MockReporter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/MockReporter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/MockReporter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/MockReporter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockReporter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockReporter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockReporter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/MockReporter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/MockReporter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/MockReporter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/MockReporter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/MockReporter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/MockReporter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/MockReporter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/MockReporter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/MockReporter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.mock.MockSpecDefault", "shortDescription" : "", "members_class" : [{"label" : "aspects", "tail" : "(): Chunk[TestAspectAtLeastR[TestEnvironment]]", "member" : "zio.mock.MockSpecDefault.aspects", "link" : "zio\/mock\/MockSpecDefault.html#aspects:zio.Chunk[zio.test.TestAspectAtLeastR[zio.test.TestEnvironment]]", "kind" : "def"}, {"member" : "zio.mock.MockSpecDefault#<init>", "error" : "unsupported entity"}, {"label" : "bootstrap", "tail" : ": ZLayer[Scope, Any, TestEnvironment]", "member" : "zio.test.ZIOSpecDefault.bootstrap", "link" : "zio\/mock\/MockSpecDefault.html#bootstrap:zio.ZLayer[zio.Scope,Any,zio.test.TestEnvironment]", "kind" : "val"}, {"label" : "suite", "tail" : "(label: String)(specs: In*)(suiteConstructor: SuiteConstructor[In], sourceLocation: SourceLocation, trace: Trace): Spec[OutEnvironment, OutError]", "member" : "zio.test.ZIOSpec.suite", "link" : "zio\/mock\/MockSpecDefault.html#suite[In](label:String)(specs:In*)(implicitsuiteConstructor:zio.test.SuiteConstructor[In],implicitsourceLocation:zio.internal.stacktracer.SourceLocation,implicittrace:zio.Trace):zio.test.Spec[suiteConstructor.OutEnvironment,suiteConstructor.OutError]", "kind" : "def"}, {"label" : "test", "tail" : "(label: String)(assertion: => In)(testConstructor: TestConstructor[Nothing, In], sourceLocation: SourceLocation, trace: Trace): Out", "member" : "zio.test.ZIOSpec.test", "link" : "zio\/mock\/MockSpecDefault.html#test[In](label:String)(assertion:=>In)(implicittestConstructor:zio.test.TestConstructor[Nothing,In],implicitsourceLocation:zio.internal.stacktracer.SourceLocation,implicittrace:zio.Trace):testConstructor.Out", "kind" : "def"}, {"label" : "environmentTag", "tail" : ": zio.EnvironmentTag[TestEnvironment]", "member" : "zio.test.ZIOSpec.environmentTag", "link" : "zio\/mock\/MockSpecDefault.html#environmentTag:zio.EnvironmentTag[R]", "kind" : "final val"}, {"label" : "Environment", "tail" : "", "member" : "zio.test.ZIOSpec.Environment", "link" : "zio\/mock\/MockSpecDefault.html#Environment=R", "kind" : "type"}, {"label" : "suiteAll", "tail" : "(name: String)(spec: Any): Spec[Nothing, Nothing]", "member" : "zio.test.ZIOSpecVersionSpecific.suiteAll", "link" : "zio\/mock\/MockSpecDefault.html#suiteAll(name:String)(spec:Any):zio.test.Spec[Nothing,Nothing]", "kind" : "macro def"}, {"label" : "runSpec", "tail" : "(trace: Trace): ZIO[Environment with TestEnvironment with ZIOAppArgs with Scope, Throwable, Summary]", "member" : "zio.test.ZIOSpecAbstract.runSpec", "link" : "zio\/mock\/MockSpecDefault.html#runSpec(implicittrace:zio.Trace):zio.ZIO[ZIOSpecAbstract.this.Environmentwithzio.test.TestEnvironmentwithzio.ZIOAppArgswithzio.Scope,Throwable,zio.test.Summary]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: ZIOSpecAbstract)(trace: Trace): ZIOSpecAbstract", "member" : "zio.test.ZIOSpecAbstract.<>", "link" : "zio\/mock\/MockSpecDefault.html#<>(that:zio.test.ZIOSpecAbstract)(implicittrace:zio.Trace):zio.test.ZIOSpecAbstract", "kind" : "final def"}, {"label" : "run", "tail" : "(): ZIO[ZIOAppArgs with Scope, Any, Summary]", "member" : "zio.test.ZIOSpecAbstract.run", "link" : "zio\/mock\/MockSpecDefault.html#run:zio.ZIO[zio.ZIOAppArgswithzio.Scope,Any,zio.test.Summary]", "kind" : "final def"}, {"label" : "validateEnv", "tail" : "(spec: Spec[R, E]): Spec[R1, E]", "member" : "zio.test.ZIOSpecAbstractVersionSpecific.validateEnv", "link" : "zio\/mock\/MockSpecDefault.html#validateEnv[R1,R,E](spec:zio.test.Spec[R,E]):zio.test.Spec[R1,E]", "kind" : "implicit macro def"}, {"label" : "installSignalHandlers", "tail" : "(runtime: Runtime[Any])(trace: Trace): UIO[Any]", "member" : "zio.ZIOApp.installSignalHandlers", "link" : "zio\/mock\/MockSpecDefault.html#installSignalHandlers(runtime:zio.Runtime[Any])(implicittrace:zio.Trace):zio.UIO[Any]", "kind" : "def"}, {"label" : "runtime", "tail" : "(): Runtime[Any]", "member" : "zio.ZIOApp.runtime", "link" : "zio\/mock\/MockSpecDefault.html#runtime:zio.Runtime[Any]", "kind" : "def"}, {"label" : "invoke", "tail" : "(args: Chunk[String])(trace: Trace): ZIO[Any, Any, Any]", "member" : "zio.ZIOApp.invoke", "link" : "zio\/mock\/MockSpecDefault.html#invoke(args:zio.Chunk[String])(implicittrace:zio.Trace):zio.ZIO[Any,Any,Any]", "kind" : "final def"}, {"label" : "exit", "tail" : "(code: ExitCode)(trace: Trace): UIO[Unit]", "member" : "zio.ZIOApp.exit", "link" : "zio\/mock\/MockSpecDefault.html#exit(code:zio.ExitCode)(implicittrace:zio.Trace):zio.UIO[Unit]", "kind" : "final def"}, {"label" : "getArgs", "tail" : "(trace: Trace): ZIO[ZIOAppArgs, Nothing, Chunk[String]]", "member" : "zio.ZIOApp.getArgs", "link" : "zio\/mock\/MockSpecDefault.html#getArgs(implicittrace:zio.Trace):zio.ZIO[zio.ZIOAppArgs,Nothing,zio.Chunk[String]]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: ZIOApp)(trace: Trace): ZIOApp", "member" : "zio.ZIOApp.<>", "link" : "zio\/mock\/MockSpecDefault.html#<>(that:zio.ZIOApp)(implicittrace:zio.Trace):zio.ZIOApp", "kind" : "final def"}, {"label" : "validateEnv", "tail" : "(zio: ZIO[R, E, A]): ZIO[R1, E, A]", "member" : "zio.ZIOAppVersionSpecific.validateEnv", "link" : "zio\/mock\/MockSpecDefault.html#validateEnv[R1,R,E,A](zio:zio.ZIO[R,E,A]):zio.ZIO[R1,E,A]", "kind" : "implicit macro def"}, {"label" : "main", "tail" : "(args0: Array[String]): Unit", "member" : "zio.ZIOAppPlatformSpecific.main", "link" : "zio\/mock\/MockSpecDefault.html#main(args0:Array[String]):Unit", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/MockSpecDefault.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/MockSpecDefault.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/MockSpecDefault.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/MockSpecDefault.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/MockSpecDefault.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/MockSpecDefault.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/MockSpecDefault.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockSpecDefault.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockSpecDefault.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockSpecDefault.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/MockSpecDefault.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/MockSpecDefault.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/MockSpecDefault.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/MockSpecDefault.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/MockSpecDefault.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/MockSpecDefault.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/MockSpecDefault.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/MockSpecDefault.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/MockSpecDefault.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : "(): Spec[TestEnvironment with Scope, Any]", "member" : "zio.test.ZIOSpecDefault.spec", "link" : "zio\/mock\/MockSpecDefault.html#spec:zio.test.Spec[zio.test.TestEnvironmentwithzio.Scope,Any]", "kind" : "abstract def"}], "class" : "zio\/mock\/MockSpecDefault.html", "kind" : "class"}, {"name" : "zio.mock.MockSystem", "shortDescription" : "", "object" : "zio\/mock\/MockSystem$.html", "members_object" : [{"label" : "Poly", "tail" : "", "member" : "zio.mock.Mock.Poly", "link" : "zio\/mock\/Mock.html#Poly", "kind" : "object"}, {"label" : "Stream", "tail" : "", "member" : "zio.mock.Mock.Stream", "link" : "zio\/mock\/Mock.html#Stream[I,E,A]extendsCapability[R,I,Nothing,zio.stream.ZStream[Any,E,A]]", "kind" : "abstract class"}, {"label" : "Sink", "tail" : "", "member" : "zio.mock.Mock.Sink", "link" : "zio\/mock\/Mock.html#Sink[I,E,A,L,B]extendsCapability[R,I,E,zio.stream.ZSink[Any,E,A,L,B]]", "kind" : "abstract class"}, {"label" : "Method", "tail" : "", "member" : "zio.mock.Mock.Method", "link" : "zio\/mock\/Mock.html#Method[I,E<:Throwable,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "Effect", "tail" : "", "member" : "zio.mock.Mock.Effect", "link" : "zio\/mock\/Mock.html#Effect[I,E,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "compose", "tail" : ": URLayer[Proxy, System]", "member" : "zio.mock.MockSystem.compose", "link" : "zio\/mock\/MockSystem$.html#compose:zio.URLayer[zio.mock.Proxy,zio.System]", "kind" : "val"}, {"label" : "LineSeparator", "tail" : "", "member" : "zio.mock.MockSystem.LineSeparator", "link" : "zio\/mock\/MockSystem$.html#LineSeparator", "kind" : "object"}, {"label" : "PropertyOrOption", "tail" : "", "member" : "zio.mock.MockSystem.PropertyOrOption", "link" : "zio\/mock\/MockSystem$.html#PropertyOrOption", "kind" : "object"}, {"label" : "PropertyOrElse", "tail" : "", "member" : "zio.mock.MockSystem.PropertyOrElse", "link" : "zio\/mock\/MockSystem$.html#PropertyOrElse", "kind" : "object"}, {"label" : "Property", "tail" : "", "member" : "zio.mock.MockSystem.Property", "link" : "zio\/mock\/MockSystem$.html#Property", "kind" : "object"}, {"label" : "Properties", "tail" : "", "member" : "zio.mock.MockSystem.Properties", "link" : "zio\/mock\/MockSystem$.html#Properties", "kind" : "object"}, {"label" : "Envs", "tail" : "", "member" : "zio.mock.MockSystem.Envs", "link" : "zio\/mock\/MockSystem$.html#Envs", "kind" : "object"}, {"label" : "EnvOrOption", "tail" : "", "member" : "zio.mock.MockSystem.EnvOrOption", "link" : "zio\/mock\/MockSystem$.html#EnvOrOption", "kind" : "object"}, {"label" : "EnvOrElse", "tail" : "", "member" : "zio.mock.MockSystem.EnvOrElse", "link" : "zio\/mock\/MockSystem$.html#EnvOrElse", "kind" : "object"}, {"label" : "Env", "tail" : "", "member" : "zio.mock.MockSystem.Env", "link" : "zio\/mock\/MockSystem$.html#Env", "kind" : "object"}, {"label" : "withRuntime", "tail" : "(f: (Runtime[R]) => UIO[A])(trace: Trace): ZIO[R, Nothing, A]", "member" : "zio.mock.Mock.withRuntime", "link" : "zio\/mock\/MockSystem$.html#withRuntime[R,A](f:zio.Runtime[R]=>zio.UIO[A])(implicittrace:zio.Trace):zio.ZIO[R,Nothing,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(trace: Trace): ULayer[System]", "member" : "zio.mock.Mock.empty", "link" : "zio\/mock\/MockSystem$.html#empty(implicittrace:zio.Trace):zio.ULayer[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/MockSystem$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/MockSystem$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/MockSystem$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/MockSystem$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/MockSystem$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/MockSystem$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/MockSystem$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockSystem$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockSystem$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/MockSystem$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/MockSystem$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/MockSystem$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/MockSystem$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/MockSystem$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/MockSystem$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/MockSystem$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/MockSystem$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/MockSystem$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/MockSystem$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.mock.Proxy", "shortDescription" : "A Proxy provides the machinery to map mocked invocations to predefined results and check some constraints on theway.", "members_class" : [{"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U, v: V): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S,t:T,u:U,v:V):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S,t:T,u:U):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S,t:T):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I,J](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H,I](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G,H](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G,H),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F,G](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F,G),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E,F](capability:zio.mock.Capability[RIn,(A,B,C,D,E,F),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E), Error, Value], a: A, b: B, c: C, d: D, e: E): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D,E](capability:zio.mock.Capability[RIn,(A,B,C,D,E),Error,Value],a:A,b:B,c:C,d:D,e:E):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D), Error, Value], a: A, b: B, c: C, d: D): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C,D](capability:zio.mock.Capability[RIn,(A,B,C,D),Error,Value],a:A,b:B,c:C,d:D):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C), Error, Value], a: A, b: B, c: C): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B,C](capability:zio.mock.Capability[RIn,(A,B,C),Error,Value],a:A,b:B,c:C):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B), Error, Value], a: A, b: B): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A,B](capability:zio.mock.Capability[RIn,(A,B),Error,Value],a:A,b:B):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, A, Error, Value], a: A): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value,A](capability:zio.mock.Capability[RIn,A,Error,Value],a:A):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, Unit, Error, Value]): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.apply", "link" : "zio\/mock\/Proxy.html#apply[RIn,ROut,Error,Value](capability:zio.mock.Capability[RIn,Unit,Error,Value]):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"member" : "zio.mock.Proxy#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/Proxy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/Proxy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/Proxy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/Proxy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/Proxy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/Proxy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/Proxy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Proxy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Proxy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Proxy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/Proxy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/Proxy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/Proxy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/Proxy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/Proxy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/Proxy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/Proxy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/Proxy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/Proxy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "invoke", "tail" : "(capability: Capability[RIn, Input, Error, Value], input: Input): ZIO[ROut, Error, Value]", "member" : "zio.mock.Proxy.invoke", "link" : "zio\/mock\/Proxy.html#invoke[RIn,ROut,Input,Error,Value](capability:zio.mock.Capability[RIn,Input,Error,Value],input:Input):zio.ZIO[ROut,Error,Value]", "kind" : "abstract def"}], "class" : "zio\/mock\/Proxy.html", "kind" : "class"}, {"name" : "zio.mock.Result", "shortDescription" : "A Result[-I, +E, +A] represents the value or failure that will be returned by mock expectation when invoked.", "object" : "zio\/mock\/Result$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/Result.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/Result.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/Result.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/Result.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/Result.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/Result.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/Result.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Result.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Result.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Result.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/Result.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/Result.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/Result.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/Result.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/Result.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/Result.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/Result.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/Result.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/Result.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "io", "tail" : ": (I) => IO[E, A]", "member" : "zio.mock.Result.io", "link" : "zio\/mock\/Result.html#io:I=>zio.IO[E,A]", "kind" : "abstract val"}], "members_object" : [{"label" : "Fail", "tail" : "", "member" : "zio.mock.Result.Fail", "link" : "zio\/mock\/Result$.html#Fail[-I,+E]extendsResult[I,E,Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Succeed", "tail" : "", "member" : "zio.mock.Result.Succeed", "link" : "zio\/mock\/Result$.html#Succeed[-I,+A]extendsResult[I,Nothing,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/Result$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/Result$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/Result$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/Result$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/Result$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/Result$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/Result$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Result$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Result$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/Result$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/Result$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/Result$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/Result$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/Result$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/Result$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/Result$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/Result$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/Result$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/Result$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/mock\/Result.html", "kind" : "class"}], "zio.mock.internal" : [{"name" : "zio.mock.internal.InvalidCall", "shortDescription" : "An InvalidCall represents failed expectation.", "object" : "zio\/mock\/internal\/InvalidCall$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/internal\/InvalidCall.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/internal\/InvalidCall.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/internal\/InvalidCall.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/internal\/InvalidCall.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/internal\/InvalidCall.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/internal\/InvalidCall.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/internal\/InvalidCall.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/InvalidCall.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/InvalidCall.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/InvalidCall.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/internal\/InvalidCall.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/internal\/InvalidCall.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/internal\/InvalidCall.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/internal\/InvalidCall.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/internal\/InvalidCall.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/internal\/InvalidCall.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/internal\/InvalidCall.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/internal\/InvalidCall.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/internal\/InvalidCall.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "InvalidPolyType", "tail" : "", "member" : "zio.mock.internal.InvalidCall.InvalidPolyType", "link" : "zio\/mock\/internal\/InvalidCall$.html#InvalidPolyType[R0,R1,In0,In1,E0,E1,A0,A1]extendsInvalidCallwithProductwithSerializable", "kind" : "final case class"}, {"label" : "InvalidCapability", "tail" : "", "member" : "zio.mock.internal.InvalidCall.InvalidCapability", "link" : "zio\/mock\/internal\/InvalidCall$.html#InvalidCapability[R0,R1,In0,In1,E0,E1,A0,A1]extendsInvalidCallwithProductwithSerializable", "kind" : "final case class"}, {"label" : "InvalidArguments", "tail" : "", "member" : "zio.mock.internal.InvalidCall.InvalidArguments", "link" : "zio\/mock\/internal\/InvalidCall$.html#InvalidArguments[R,I,E,A]extendsInvalidCallwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/internal\/InvalidCall$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/internal\/InvalidCall$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/internal\/InvalidCall$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/internal\/InvalidCall$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/internal\/InvalidCall$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/internal\/InvalidCall$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/internal\/InvalidCall$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/InvalidCall$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/InvalidCall$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/InvalidCall$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/internal\/InvalidCall$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/internal\/InvalidCall$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/internal\/InvalidCall$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/internal\/InvalidCall$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/internal\/InvalidCall$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/internal\/InvalidCall$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/internal\/InvalidCall$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/internal\/InvalidCall$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/internal\/InvalidCall$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/mock\/internal\/InvalidCall.html", "kind" : "class"}, {"name" : "zio.mock.internal.MockException", "shortDescription" : "A MockException is used internally by the mock framework to signal failed expectations to the test framework.", "object" : "zio\/mock\/internal\/MockException$.html", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "zio\/mock\/internal\/MockException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "zio\/mock\/internal\/MockException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "zio\/mock\/internal\/MockException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "zio\/mock\/internal\/MockException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "zio\/mock\/internal\/MockException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/mock\/internal\/MockException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/mock\/internal\/MockException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/mock\/internal\/MockException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "zio\/mock\/internal\/MockException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "zio\/mock\/internal\/MockException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "zio\/mock\/internal\/MockException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "zio\/mock\/internal\/MockException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "zio\/mock\/internal\/MockException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/internal\/MockException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/internal\/MockException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/internal\/MockException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/internal\/MockException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/internal\/MockException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/internal\/MockException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/internal\/MockException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/MockException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/MockException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/MockException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/internal\/MockException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/internal\/MockException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/internal\/MockException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/internal\/MockException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/internal\/MockException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/internal\/MockException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/internal\/MockException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/internal\/MockException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "InvalidCallException", "tail" : "", "member" : "zio.mock.internal.MockException.InvalidCallException", "link" : "zio\/mock\/internal\/MockException$.html#InvalidCallExceptionextendsMockExceptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "UnexpectedCallException", "tail" : "", "member" : "zio.mock.internal.MockException.UnexpectedCallException", "link" : "zio\/mock\/internal\/MockException$.html#UnexpectedCallException[R,I,E,A]extendsMockExceptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "UnsatisfiedExpectationsException", "tail" : "", "member" : "zio.mock.internal.MockException.UnsatisfiedExpectationsException", "link" : "zio\/mock\/internal\/MockException$.html#UnsatisfiedExpectationsException[R]extendsMockExceptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/internal\/MockException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/internal\/MockException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/internal\/MockException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/internal\/MockException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/internal\/MockException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/internal\/MockException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/internal\/MockException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/MockException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/MockException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/MockException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/internal\/MockException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/internal\/MockException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/internal\/MockException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/internal\/MockException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/internal\/MockException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/internal\/MockException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/internal\/MockException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/internal\/MockException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/internal\/MockException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/mock\/internal\/MockException.html", "kind" : "class"}, {"name" : "zio.mock.internal.ProxyFactory", "shortDescription" : "", "object" : "zio\/mock\/internal\/ProxyFactory$.html", "members_object" : [{"label" : "mockProxy", "tail" : "(state: MockState[R])(arg0: zio.EnvironmentTag[R], trace: Trace): ULayer[Proxy]", "member" : "zio.mock.internal.ProxyFactory.mockProxy", "link" : "zio\/mock\/internal\/ProxyFactory$.html#mockProxy[R](state:zio.mock.internal.MockState[R])(implicitevidence$1:zio.EnvironmentTag[R],implicittrace:zio.Trace):zio.ULayer[zio.mock.Proxy]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/mock\/internal\/ProxyFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/mock\/internal\/ProxyFactory$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/mock\/internal\/ProxyFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/mock\/internal\/ProxyFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/mock\/internal\/ProxyFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/mock\/internal\/ProxyFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/mock\/internal\/ProxyFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/ProxyFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/ProxyFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/mock\/internal\/ProxyFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/mock\/internal\/ProxyFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/mock\/internal\/ProxyFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/mock\/internal\/ProxyFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/mock\/internal\/ProxyFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/mock\/internal\/ProxyFactory$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/mock\/internal\/ProxyFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/mock\/internal\/ProxyFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/mock\/internal\/ProxyFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/mock\/internal\/ProxyFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};